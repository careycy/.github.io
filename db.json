[{"title":"docker oracle 镜像安装","url":"/2024/05/20/docker/docker oracle 镜像安装/","content":"\n# oracle docker 镜像安装\n\n> Oracle 12c，全称Oracle Database 12c，是Oracle 11g的升级版，新增了很多新的特性\n\n---\n\n> > Docker下载oracle12c\n\n> > 查找oracle镜像\n> \n> ```docker\n> docker search oracle\n> ```\n> \n> > 下载Oracle镜像\n> \n> > 我这里选择 truevoly/oracle-12c镜像\n\n> ```docker\n>  docker pull truevoly/oracle-12c\n> ```\n> \n> > 查看已安装镜像,启动Oracle数据库\n\n> 1. 启动并暴露8080&1521端口，8080可以登录网页端管理，1521是数据连接端口:\n> \n> ```docker\n> docker run -d -p 8080:8080 -p 1521:1521 truevoly/oracle-12c\n> ```\n> \n> 1. 启动并暴露8080&1521端口，并且挂载宿主机目录 /var/oracle/data 到oracle服务器*/u01/app/oracle*目录，这样database数据就保存在本地宿主机上\n> \n> ```docker\n>  docker run -d -p 8080:8080 -p 1521:1521 \n>  -v /var/oracle/data:u01/app/oracle truevoly/oracle-12c\n> ```\n\n> > 启动并定制化DBCA总内存大小，DBCA_TOTAL_MEMORY (in Mb):\n\n> > 查看日志\n> \n> ```docker\n> docker logs -f  进程id\n> ```\n\n> > 进入oracle容器\n> > 进入镜像的bash对数据库进行进一步的操作\n\n> ```docker\n> docker exec -it 84d8 /bin/bash\n> ```\n> \n> > 连接Oracle数据库\n> \n> ```plsql\n>  hostname: localhost #主机名\n>  port: 1521 #端口号\n>  sid: xe \n>  service name: xe #服务名\n>  username: system #用户名\n>  password: oracle #密码\n> ```\n> \n> ---\n\n> > 创建用户并授权\n> \n> 1. 创建表空间\n\n> ```sql\n> create tablespace     TABLESPACE_QCJ   datafile 'TABLESPACE_QCJ.dbf' \n> size 500M autoextend on next 5M maxsize unlimited;\n> ```\n> \n> 1. 创建用户并授权表空间给创建的用户\n\n> ```sql\n> CREATE USER root IDENTIFIED BY root DEFAULT TABLESPACE TABLESPACE_QCJ\n> ```\n> \n> 1. 授权用户管理员权限\n\n> ```sql\n> grant connect,resource,dba to root;\n> grant connect to root with admin option;\n> grant dba to root with admin option;\n> grant resource to root with admin option;\n> ```\n","tags":["docker"]},{"title":"MAC VM虚拟机无法使用鼠标侧键配置","url":"/2024/04/09/linux/ubuntu/MAC VM虚拟机无法使用鼠标侧键配置/","content":"\n![image.png](../images/image.png)","tags":["vm"]},{"title":"rsync 跨平台平台工具使用指南","url":"/2024/04/07/linux/rsync/","content":"\nrsync主要是一个命令行工具，它通过命令行参数来接收用户的指令和配置信息。以下是rsync提供的一些常用接口和参数：\n\n1. **基本语法：**\n\n   ```\n   rsync [选项] 源目录/文件 目标目录/文件\n   ```\n2. **常用选项：**\n   - `-a, --archive`：归档模式，保持文件属性、权限等。\n   - `-v, --verbose`：显示详细的输出信息。\n   - `-z, --compress`：压缩传输数据。\n   - `-r, --recursive`：递归处理目录。\n   - `-u, --update`：仅传输更新的文件。\n   - `-n, --dry-run`：模拟执行，不实际传输文件。\n   - `-P, --progress`：显示传输进度。\n3. **远程传输：**\n   rsync也可以通过SSH等方式进行远程文件同步，需要使用类似`user@host:/path`的格式指定远程主机和目录。\n4. **过滤规则：**\n   可以使用`--exclude`、`--include`等选项指定需要排除或包含的文件或目录，通过正则表达式进行匹配。\n5. **日志记录：**\n   可以使用`--log-file`选项指定日志文件，记录rsync执行过程中的详细信息。\n6. **增量传输：**\n   rsync可以根据源文件和目标文件的差异部分进行增量传输，通过比较文件内容和修改时间来确定需要传输的部分。\n\n这些只是rsync提供的一部分常用接口和选项，具体可以查看rsync的官方文档或使用`rsync --help`命令查看更多详细信息。","tags":["linux"]},{"title":"frp 服务端搭建","url":"/2024/04/03/linux/FRP内网穿透服务端/","content":"\n### FRP 服务端搭建\n\ngithub地址： <a href=\"https://github.com/fatedier/frp\">https://github.com/fatedier/frp</a>\n\nreleases地址： <a href=\"https://github.com/fatedier/frp/releases\"> https://github.com/fatedier/frp/releases</a>\n\n配置文档说明 ：<a href=\"https://gofrp.org/docs/\"> https://gofrp.org/docs/</a>\n\n---\n\n## frps 服务端配置\n\nfrps.ini\n\n```ini\n[common]\n # 客户端链接服务器的端口，在客户端配置时要一样\nbind_port = 7000\n # 管理控制台端口\ndashboard_port = 7001\ntoken = 【自定义】\n # 管理控制台用户吗 \ndashboard_user = root\n # 管理控制台密码\ndashboard_pwd = 【自定义】\n # 日志位置，最好写绝对路径  \nlog_file = /home/frp/frps.log 【自定义】\n # 日志级别\nlog_level = info\n # 日志记录天数\nlog_max_days = 3\n # 链接迟最大数量\nmax_pool_count = 10\n```\n\n#### 在/lib/systemd/system/中新建 frps.service文件。\n\n```shell\nvi /lib/systemd/system/frps.service\n```\n\n```shell\n[Unit]\nDescription=fraps service\nAfter=network.target network-online.target syslog.target\nWants=network.target network-online.target\n\n[Service]\nType=simple\n\n#启动服务的命令（此处写你的frps的实际安装目录）\nExecStart=/usr/bin/frps -c /etc/frp/frps.ini\n\n[Install]\nWantedBy=multi-user.target\n```\n\n### systemctl 管理 frps\n\n注册服务端systemctl服务\n\n```shell\nsudo systemctl enable frps\n```\n\n启动服务\n\n```shell\nsudo systemctl start frps\n```\n\n重启\n\n```shell\nsudo systemctl restart frps\n```\n\n停止\n\n```shell\nsudo systemctl stop frps\n```\n\n查看应用日志\n\n```shell\nsudo systemctl status frps\n```\n\n---\n\n## 客户端配置\n\nfrpc.ini 服务端配置\n\n```shell\n[common]\nserver_addr = 【服务器外网地址】\nserver_port = 7000\ntoken = 【自定义】\nadmin_port = 7001\nadmin_user = root\nadmin_pwd = Kai19930922**..\n\n\n[gitlab]\ntype = tcp\nlocal_ip = 127.0.0.1\nlocal_port = 8011\nremote_port = 8011\n```\n\n### systemctl 管理 frpc\n\nfrpc 安装 制作systemctl 启动项\n\n#### 在/lib/systemd/system/中新建 frpc.service文件。\n\n```shell\nvi /lib/systemd/system/frpc.service\n```\n\n```shell\n[Unit]\nDescription=frapc service\nAfter=network.target network-online.target syslog.target\nWants=network.target network-online.target\n\n[Service]\nType=simple\n\n#启动服务的命令（此处写你的frps的实际安装目录）\nExecStart=/usr/bin/frpc -c /etc/frp/frpc.ini\n\n[Install]\nWantedBy=multi-user.target\n```\n\n---\n\n注册客户端systemctl服务\n\n```shell\nsudo systemctl enable frpc\n```\n\n启动服务\n\n```shell\nsudo systemctl start frpc\n```\n\n重启\n\n```shell\nsudo systemctl restart frpc\n```\n\n停止\n\n```shell\nsudo systemctl stop frpc\n```\n\n查看应用日志\n\n```shell\nsudo systemctl status frpc\n```","tags":["linux"]},{"title":"idea 激活","url":"/2024/04/02/IDEA/idea 激活/","content":"\n# idea 激活\n\n## 支持最新版本\n\n### 使用方法\n\n1、本激活方法适用于2022、2021、2020、2019、2018全系列版本；；\n2、使用前请仔细阅读下面的图文教程, 按照教程一步一步来即可；\n\nhttps://www.exception.site/essay/how-to-free-use-intellij-idea-2020\n\n文档更新日期：2022.2.6\n\n方式1：无限重置30天试用期教程:\nhttps://www.exception.site/essay/idea-reset-eval\n\n方式2：激活到2099年教程: <https://www.exception.site/essay/how-to-free-use-intellij-idea-2019-3>\n\n```\n6G5NXCPJZB-eyJsaWNlbnNlSWQiOiI2RzVOWENQSlpCIiwibGljZW5zZWVOYW1lIjoic2lnbnVwIHNjb290ZXIiLCJhc3NpZ25lZU5hbWUiOiIiLCJhc3NpZ25lZUVtYWlsIjoiIiwibGljZW5zZVJlc3RyaWN0aW9uIjoiIiwiY2hlY2tDb25jdXJyZW50VXNlIjpmYWxzZSwicHJvZHVjdHMiOlt7ImNvZGUiOiJQU0kiLCJmYWxsYmFja0RhdGUiOiIyMDI1LTA4LTAxIiwicGFpZFVwVG8iOiIyMDI1LTA4LTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBEQiIsImZhbGxiYWNrRGF0ZSI6IjIwMjUtMDgtMDEiLCJwYWlkVXBUbyI6IjIwMjUtMDgtMDEiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiSUkiLCJmYWxsYmFja0RhdGUiOiIyMDI1LTA4LTAxIiwicGFpZFVwVG8iOiIyMDI1LTA4LTAxIiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJQUEMiLCJmYWxsYmFja0RhdGUiOiIyMDI1LTA4LTAxIiwicGFpZFVwVG8iOiIyMDI1LTA4LTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBHTyIsImZhbGxiYWNrRGF0ZSI6IjIwMjUtMDgtMDEiLCJwYWlkVXBUbyI6IjIwMjUtMDgtMDEiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUFNXIiwiZmFsbGJhY2tEYXRlIjoiMjAyNS0wOC0wMSIsInBhaWRVcFRvIjoiMjAyNS0wOC0wMSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQV1MiLCJmYWxsYmFja0RhdGUiOiIyMDI1LTA4LTAxIiwicGFpZFVwVG8iOiIyMDI1LTA4LTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBQUyIsImZhbGxiYWNrRGF0ZSI6IjIwMjUtMDgtMDEiLCJwYWlkVXBUbyI6IjIwMjUtMDgtMDEiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUFJCIiwiZmFsbGJhY2tEYXRlIjoiMjAyNS0wOC0wMSIsInBhaWRVcFRvIjoiMjAyNS0wOC0wMSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQQ1dNUCIsImZhbGxiYWNrRGF0ZSI6IjIwMjUtMDgtMDEiLCJwYWlkVXBUbyI6IjIwMjUtMDgtMDEiLCJleHRlbmRlZCI6dHJ1ZX1dLCJtZXRhZGF0YSI6IjAxMjAyMjA5MDJQU0FOMDAwMDA1IiwiaGFzaCI6IlRSSUFMOi0xMDc4MzkwNTY4IiwiZ3JhY2VQZXJpb2REYXlzIjo3LCJhdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlLCJpc0F1dG9Qcm9sb25nYXRlZCI6ZmFsc2V9-SnRVlQQR1/9nxZ2AXsQ0seYwU5OjaiUMXrnQIIdNRvykzqQ0Q+vjXlmO7iAUwhwlsyfoMrLuvmLYwoD7fV8Mpz9Gs2gsTR8DfSHuAdvZlFENlIuFoIqyO8BneM9paD0yLxiqxy/WWuOqW6c1v9ubbfdT6z9UnzSUjPKlsjXfq9J2gcDALrv9E0RPTOZqKfnsg7PF0wNQ0/d00dy1k3zI+zJyTRpDxkCaGgijlY/LZ/wqd/kRfcbQuRzdJ/JXa3nj26rACqykKXaBH5thuvkTyySOpZwZMJVJyW7B7ro/hkFCljZug3K+bTw5VwySzJtDcQ9tDYuu0zSAeXrcv2qrOg==-MIIETDCCAjSgAwIBAgIBDTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTIwMTAxOTA5MDU1M1oXDTIyMTAyMTA5MDU1M1owHzEdMBsGA1UEAwwUcHJvZDJ5LWZyb20tMjAyMDEwMTkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCUlaUFc1wf+CfY9wzFWEL2euKQ5nswqb57V8QZG7d7RoR6rwYUIXseTOAFq210oMEe++LCjzKDuqwDfsyhgDNTgZBPAaC4vUU2oy+XR+Fq8nBixWIsH668HeOnRK6RRhsr0rJzRB95aZ3EAPzBuQ2qPaNGm17pAX0Rd6MPRgjp75IWwI9eA6aMEdPQEVN7uyOtM5zSsjoj79Lbu1fjShOnQZuJcsV8tqnayeFkNzv2LTOlofU/Tbx502Ro073gGjoeRzNvrynAP03pL486P3KCAyiNPhDs2z8/COMrxRlZW5mfzo0xsK0dQGNH3UoG/9RVwHG4eS8LFpMTR9oetHZBAgMBAAGjgZkwgZYwCQYDVR0TBAIwADAdBgNVHQ4EFgQUJNoRIpb1hUHAk0foMSNM9MCEAv8wSAYDVR0jBEEwP4AUo562SGdCEjZBvW3gubSgUouX8bOhHKQaMBgxFjAUBgNVBAMMDUpldFByb2ZpbGUgQ0GCCQDSbLGDsoN54TATBgNVHSUEDDAKBggrBgEFBQcDATALBgNVHQ8EBAMCBaAwDQYJKoZIhvcNAQELBQADggIBABqRoNGxAQct9dQUFK8xqhiZaYPd30TlmCmSAaGJ0eBpvkVeqA2jGYhAQRqFiAlFC63JKvWvRZO1iRuWCEfUMkdqQ9VQPXziE/BlsOIgrL6RlJfuFcEZ8TK3syIfIGQZNCxYhLLUuet2HE6LJYPQ5c0jH4kDooRpcVZ4rBxNwddpctUO2te9UU5/FjhioZQsPvd92qOTsV+8Cyl2fvNhNKD1Uu9ff5AkVIQn4JU23ozdB/R5oUlebwaTE6WZNBs+TA/qPj+5/we9NH71WRB0hqUoLI2AKKyiPw++FtN4Su1vsdDlrAzDj9ILjpjJKA1ImuVcG329/WTYIKysZ1CWK3zATg9BeCUPAV1pQy8ToXOq+RSYen6winZ2OO93eyHv2Iw5kbn1dqfBw1BuTE29V2FJKicJSu8iEOpfoafwJISXmz1wnnWL3V/0NxTulfWsXugOoLfv0ZIBP1xH9kmf22jjQ2JiHhQZP7ZDsreRrOeIQ/c4yR8IQvMLfC0WKQqrHu5ZzXTH4NO3CwGWSlTY74kE91zXB5mwWAx1jig+UXYc2w4RkVhy0//lOmVya/PEepuuTTI4+UJwC7qbVlh5zfhj8oTNUXgN0AOc+Q0/WFPl1aw5VV/VrO8FCoB15lFVlpKaQ1Yh+DVU8ke+rt9Th0BCHXe0uZOEmH0nOnH/0onD\n```\n\n方法来源 ：https://www.exception.site/","tags":["linux"]},{"title":"Ubuntu 查看代理设置的五种方法","url":"/2024/03/30/linux/ubuntu/Ubuntu 查看代理设置的五种方法/","content":"\n### Ubuntu 查看代理设置的五种方法\n\n### 1. 命令行查看环境变量 在Ubuntu系统中，您可以通过命令行查看与代理相关的环境变量。打开终端，然后输入以下命令：\n\n ```bash echo $http_proxy echo $https_proxy ```\n\n 这些命令将显示当前会话的环境变量值，其中包含了HTTP和HTTPS代理的设置。如果这些环境变量被设置了，它们通常包含代理服务器的地址和端口号。\n\n\n\n ### 2. 使用`apt`配置 如果您是通过`apt`进行软件包管理，可以查看`apt`的配置文件来获取代理设置。打开终端，输入以下命令：\n\n ```bash cat /etc/apt/apt.conf ``` \n\n这个命令会显示`apt`的配置文件内容，其中可能包含代理服务器的设置。 \n\n\n\n### 3. 图形界面工具 Ubuntu提供了图形界面工具，您可以通过系统设置来查看和修改代理设置。 - 打开“系统设置”。 - 点击“网络”。 - 选择您正在使用的网络连接。 - 点击“设置”或者“选项”按钮。 - 在打开的窗口中，找到“代理”选项卡，这里会显示当前的代理设置。 \n\n\n\n### 4. 查看系统代理配置文件 在某些情况下，系统级别的代理设置可能被存储在`/etc/environment`文件中。打开终端，输入以下命令来查看该文件：\n\n ```bash cat /etc/environment ``` \n\n如果文件中包含了`http_proxy`和`https_proxy`的设置，那么这些就是系统级别的代理设置。\n\n\n\n ### 5. 使用`nmcli`工具 nmcli是NetworkManager的命令行界面，可以用来查看和修改网络设置。在终端中输入以下命令：\n\n ```bash nmcli dev show ``` \n\n这个命令会显示所有网络设备的详细信息，包括代理设置。 \n\n\n\n### 总结 以上就是在Ubuntu系统中查看代理设置的几种方法。您可以根据自己的需要和习惯选择使用命令行或者图形界面工具来进行查看。需要注意的是，某些代理设置可能是临时的，只对当前会话有效，而有些则是永久性的，需要修改配置文件才能进行更改。\n","tags":["linux"]},{"title":"linux 配置系统服务","url":"/2024/03/24/linux/hysteria2/","content":"\n# hysteria2\n\nvim /lib/systemd/system/hysteria2.service\n\n```\n[Unit]\nDescription=hysteria2 service\nAfter=network.target network-online.target syslog.target\nWants=network.target network-online.target\n \n[Service]\nType=simple\n \n#启动服务的命令（此处写你的frps的实际安装目录）\nExecStart=/usr/bin/hysteria-linux-amd64 -c /etc/hysteria/hy-client.json\n \n[Install]\nWantedBy=multi-user.target\n```","tags":["linux"]},{"title":"docker 安装portainer.io","url":"/2023/06/15/docker/docker 安装portainer.io/","content":"\n# docker 安装portainer.io\n```shell\ndocker run -d  --name portainer -p 9000:9000 -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/opt/portainer_data --restart always --privileged=true portainer/portainer-ce:latest\n``` ","tags":["docker"]},{"title":"nginx 拆卸","url":"/2023/05/10/nginx/nginx/","content":"# nginx 拆卸 \n\n\n/usr/local/nginx/sbin/nginx -s stop\n 如果不知道nginx安装路径，可以通过执行ps命令找到nginx程序的PID，然后kill其PID\n\n2、查找根下所有名字包含nginx的文件 \nfind / -name nginx\n\n\n3、执行命令 rm -rf *删除nignx安装的相关文件\n\n4、其他设置 如果设置了Nginx开机自启动的话，可能还需要下面两步\nchkconfig nginx off\n\nrm -rf /etc/init.d/nginx\n\n/etc/nginx/freessl/full_chain.pem\n/etc/nginx/freessl/private.key\n\n\n# Automatically generated for Debian scripts. DO NOT TOUCH!\n[client]\nhost     = localhost\nuser     = debian-sys-maint\npassword = WRdKE08tAggvYcrj\nsocket   = /var/run/mysqld/mysqld.sock\n[mysql_upgrade]\nhost     = localhost\nuser     = debian-sys-maint\npassword = WRdKE08tAggvYcrj\nsocket   = /var/run/mysqld/mysqld.sock","tags":["MacOs"]},{"title":"docker 常用命令","url":"/2023/01/18/docker/docker 常用命令/","content":"\n# docker 常用命令\n\n查看docker常用命令： \n``` shell\ndocker --help\n\n```\n---\n\n查看本地有哪些镜像：\n``` shell\n docker images  \n ```\n\t\t\t\t  -a   参数a = all  同时显示 当前镜像分层的镜像内容 (扩展 镜像可以包含多层内容)\n\t\t\t\t  -q   显示镜像的id \n显示镜像的备注信息： docker images --digests   主要显示参数 DIGEST 备注说明信息\n\n\n从远程仓库获取镜像  docker pull  镜像名称\n\n\n## 参数详解\n\n>　-v 本地目录:容器目录  或 -v 容器目录\n\n示例：\n```shell\n　　sudo docker run -it --rm -v $PWD(本地目录):/python(容器目录) python /bin/bash \n```\n> 将本机的当前目录，挂载到镜像中的/python目录　　\n\n---\n\n\n\ndocker run  -it  镜像id/镜像名称     -- 创建镜像容器实例   it 为保持容器虚拟会话窗口\ndocker run -it  --name  自定义镜像名称   镜像名/镜像id   \n\n docker ps   --- 查看当前正在运行的容器 参数 -a 查看所有创建的容器实例包括停止的  “ -n 参数“返回特定行数\n\nexit 在容器中执行，可以正常关闭当前运行的容器实例\n\n Ctrl + p +q   容器内执行，可以退出当前容器，并保持容器正常运行\n\n docker start  容器实例id   -- 可以启动已经关闭的容器实例 \n\n docker restart   容器实例id --可以重启制定的容器实例\n\ndocker stop   容器实例id  --可以在容器外停止容器的运行 \n\n\ndocker rm -f $(docker ps -a -q)   -- 强制删除正在运行的容器实例 ，括号内为表达式，返回所有的容器实例id\n\n docker attach  容器id   -- 根据提供的容器id返回正在运行的容器当中 \n\n docker exec -it 容器id /bin/bash  执行容器中的命令行\n\ndocker exec -t 容器id  ls -l /tmp    --在镜像外发起shell命令执行对镜像的操作 \n\n docker  cp 容器id:/tmp/yum.log  /root   从容器中拷贝指定的文件内容到宿主机中 \n","tags":["docker"]},{"title":"docker mysql 数据库","url":"/2023/01/12/docker/docker mysql/","content":"\n# docker 数据库\n\n```\ndocker run --name mysql5.7  -e MYSQL_ROOT_PASSWORD=123456 -p 3306:3306 --restart always -d mysql:oracle\n```\n","tags":["docker"]},{"title":"VPS优化","url":"/2023/01/06/VPS/VPS 网络延迟优化/","content":"\n\n### <mark>BBR Plus</mark>\nwget --no-check-certificate -O tcpx.sh https://raw.githubusercontent.com/ylx2016/Linux-NetSpeed/master/tcpx.sh\n \n\n### <mark>net_speeder 增量收发包</mark>\nwget -O net_speeder.sh --no-check-certificate https://soft.mengclaw.com/Bash/net_speeder.sh\n\n","tags":["MacOS"]},{"title":"解决苹果鼠标比较飘的问题","url":"/2023/01/06/mac/解决苹果鼠标比较飘的问题/","content":"# 解决苹果鼠标比较飘的问题\n\n```\ndefaults write -g com.apple.mouse.scaling 25\n\n```\n\n\n","tags":["MacOs"]},{"title":"brew 国内下载速度过慢，切换阿里源","url":"/2023/01/06/mac/brew切换阿里源/","content":"\n# brew 国内下载速度过慢，切换阿里源\n\n**环境信息**\n \n> MacOs 版本13.0.1 (22A400) [^1]\n> 2022-12-8 \n\n[^1]: 文章仅实验于此版本 \n\n## 查看 brew.git 当前源\n``` shell\n cd \"$(brew --repo)\" && git remote -v\n```\n\n> origin    https://github.com/Homebrew/brew.git (fetch)\n origin    https://github.com/Homebrew/brew.git (push)\n\n### 查看 homebrew-core.git 当前源\n``` shell\ncd \"$(brew --repo homebrew/core)\" && git remote -v\n```\n输出：\n> origin    https://github.com/Homebrew/homebrew-core.git (fetch)\n> origin    https://github.com/Homebrew/homebrew-core.git (push)\n\n### 修改 brew.git 为阿里源\n``` shell\n git -C \"$(brew --repo)\" remote set-url origin https://mirrors.aliyun.com/homebrew/brew.git\n```\n### 修改 homebrew-core.git 为阿里源\n``` shell\n git -C \"$(brew --repo homebrew/core)\" remote set-url origin https://mirrors.aliyun.com/homebrew/homebrew-core.git\n```\n### zsh 替换 brew bintray 镜像\n``` shell\n echo 'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles' >> ~/.zshrc\n source ~/.zshrc\n```\n### bash 替换 brew bintray 镜像\n``` shell\n echo 'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles' >> ~/.bash_profile\n source ~/.bash_profile\n```\n### 刷新源\n``` shell\n brew update\n```\n## 重置官方版本\n\n### 重置 brew.git 为官方源\n``` shell\n git -C \"$(brew --repo)\" remote set-url origin https://github.com/Homebrew/brew.git\n```\n### 重置 homebrew-core.git 为官方源\n``` shell\n git -C \"$(brew --repo homebrew/core)\" remote set-url origin https://github.com/Homebrew/homebrew-core.git\n```\n### 重置 homebrew-cask.git 为官方源\n``` shell\n git -C \"$(brew --repo homebrew/cask)\" remote set-url origin https://github.com/Homebrew/homebrew-cask\n```\n \n``` shell\n vi ~/.zshrc\n```\n> 删除或者注释 export HOMEBREW_BOTTLE_DOMAIN=xxxxxxxxx\n\n``` shell\nvi ~/.bash_profile\n```\n> 删除或者注释 export HOMEBREW_BOTTLE_DOMAIN=xxxxxxxxx\n\n```shell \nunset HOMEBREW_BOTTLE_DOMAIN\n\n```\n\n### 刷新源\n``` shell\n$ brew update\n```","tags":["MacOs"]},{"title":"linux firewall防火墙常用命令","url":"/2023/01/06/linux/防火墙命令/","content":"\n### <mark>开启端口3306</mark>\n\n```shell\nfirewall-cmd --zone=public --add-port=443/tcp --permanent\nfirewall-cmd --zone=public --add-port=139/tcp --permanent\n```\n\nfirewall-cmd --zone=public --add-port=23456/tcp --permanent\n\n\n### <mark>关闭端口命令</mark>\n\n```shell\nfirewall-cmd --zone=public --remove-port=8080/tcp --permanent\n```\nhttps://www.xiao66ya.cn/\nwww.carey.js.cn\n### <mark>重启防火墙</mark>\n\n```shell\nfirewall-cmd --reload\n```\n\n### <mark>查看已经开放的端口</mark>\n\n```shell\nfirewall-cmd --list-ports\n```\n\n### <mark>查看防火状态</mark>\n\n```shell\nsystemctl status firewalld\n\nservice  iptables  status\n```\n\n### <mark>暂时关闭防火墙</mark>\n\n```shell\nsystemctl stop firewalld\n\nservice iptables stop\n```\n\n### <mark>永久关闭防火墙</mark>\n\n```\nsystemctl disable firewalld\n\nchkconfig iptables off\n```\n\n### <mark>重启防火墙</mark>\n\n```\nsystemctl enable firewalld\n\nservice iptables restart\n```\n\n### <mark>永久关闭后重启</mark>\n\n//暂时还没有试过\n\n```\nchkconfig iptables on\n```\n\n### <mark>启动防火墙</mark>\n\n```shell\nsystemctl start firewalld\n```\n\n### <mark>设置开机启动</mark>\n\n```\nsystemctl enable firewalld\n```\n\n### <mark>停止并禁用开机启动</mark>\n\n```shell\nsytemctl disable firewalld\n```\n\n### <mark>查看版本</mark>\n\n```\nfirewall-cmd --version\n```\n\n### <mark>查看帮助</mark>\n\n```\nfirewall-cmd --help\n```\n\n### <mark>查看区域信息</mark>\n\n```\nfirewall-cmd --get-active-zones\n```\n\n### <mark>查看指定接口所属区域信息</mark>\n\n```\nfirewall-cmd --get-zone-of-interface=eth0\n```\n\n### <mark> 拒绝所有包</mark>\n\n```\nfirewall-cmd --panic-on\n```\n\n### <MARK>取消拒绝状态</MARK>\n\n```\nfirewall-cmd --panic-off\n```\n\n### <MARK>查看是否拒绝</MARK>\n\n```\nfirewall-cmd --query-panic\n```\n\n### <MARK>将接口添加到区域(默认接口都在public)</MARK>\n\n```\nfirewall-cmd --zone=public --add-interface=eth0(永久生效再加上\n --permanent 然后reload防火墙)\n```\n\n### <MARK>设置默认接口区域</MARK>\n\n```\nfirewall-cmd --set-default-zone=public(立即生效，无需重启)\n```\n\n### \n\n### <MARK>查看监听的端口</MARK>\n\n```\nnetstat -lnpt\n```\n\nPS:centos7默认没有 netstat 命令，需要安装 net-tools 工具，yum install -y net-tools###检查端口被哪个进程占用\n\nnetstat -lnpt |grep 5672\n\n\n\n\n\n\n\n\ndocker run -d --name subweb --restart always \\\n  -p 18080:80 \\\n  -e SITE_NAME=subweb \\\n  -e API_URL=http://202.5.28.42:25500 \\\n  -e SHORT_URL=https://s.ops.ci \\\n  stilleshan/subweb","tags":["linux"]},{"title":"Ubuntu 静态IP配置","url":"/2023/01/06/linux/ubuntu/静态IP配置/","content":"# 静态IP配置\n\n ### 适用版本 Ubuntu 22.04.1 LTS \n\nvim /etc/netplan/01-network-manager-all.yaml\n\n\n```shell\n# This is the network config written by 'subiquity'\nnetwork:\n  ethernets:\n    ens33:  #网口\n      dhcp4: no   #dhcp 开关\n      addresses: [192.168.100.156/24] #地址\n      optional: true\n      routes:\n        - to: default\n          via: 192.168.100.1 #网关\n      nameservers:\n        addresses: [114.114.114.114,8.8.8.8] #DNS\n  version: 2\n\n```\n```shell\nsudo netplan apply\n\n```\n\n## 多网卡配置\n\n\n\n\n\n进行启用配置\n\n","tags":["linux"]},{"title":"apt 切换为阿里源","url":"/2023/01/06/linux/ubuntu/apt阿里源/","content":"\n# apt阿里源\n\n\n ### 适用版本 Ubuntu 22.04.1 LTS \n\n/etc/apt/sources.list \n\n``` shell\ndeb http://mirrors.aliyun.com/ubuntu/ jammy main restricted universe multiverse\ndeb-src http://mirrors.aliyun.com/ubuntu/ jammy main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ jammy-security main restricted universe multiverse\ndeb-src http://mirrors.aliyun.com/ubuntu/ jammy-security main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ jammy-updates main restricted universe multiverse\ndeb-src http://mirrors.aliyun.com/ubuntu/ jammy-updates main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ jammy-proposed main restricted universe multiverse\ndeb-src http://mirrors.aliyun.com/ubuntu/ jammy-proposed main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ jammy-backports main restricted universe multiverse\ndeb-src http://mirrors.aliyun.com/ubuntu/ jammy-backports main restricted universe multiverse\n```\n","tags":["linux"]},{"title":"docker搭建MosDNS","url":"/2023/01/06/docker/docker搭建MosDNS/","content":"\n# docker搭建MosDNS\n\n\n### 准备MosDNS需要的配置文件\n```shell\nwget https://glare.xukecheng.tech/Loyalsoldier/geoip/cn.dat -O \\\n/Users/carey.z/etc/mosdns/cn.dat && \\\nwget https://glare.xukecheng.tech/Loyalsoldier/v2ray-rules-dat/geosite.dat -O \\\n/Users/carey.z/etc/mosdns/geosite.dat && \\\nwget https://glare.xukecheng.tech/Loyalsoldier/v2ray-rules-dat/geoip.dat -O \\\n/Users/carey.z/etc/mosdns/geoip.dat && \\\ntouch /Users/carey.z/etc/mosdns/ecs_cn_domain.txt && \\\ntouch /Users/carey.z/etc/mosdns/ecs_tw_domain.txt\n```\n\n**安装命令**\n```shell \n docker run -d --name mosdns -p 5454:53/udp\\\n -p 5454:53/tcp -v /Users/carey.z/etc/mosdns:/etc/mosdns\\\n  irinesistiana/mosdns:latest\n\n\n```\n\n","tags":["docker"]},{"title":"docker 运行 openwrt.md","url":"/2023/01/06/docker/docker 运行 openwrt/","content":"\n# docker 运行 openwrt.md\n\ndocker run -d --name openwrtx86_64 --net openwrt --privileged --ip 10.0.0.8 sulinggg/openwrt:x86_64 /sbin/init\n\n\nconfig interface 'lan'\n        option type 'bridge'\n        option ifname 'eth0'\n        option proto 'static'\n        option ipaddr '10.0.0.8'\n        option netmask '255.255.255.0'\n        option gateway '10.0.0.10'\n        option broadcast '10.0.0.255'\n        option dns '114.114.114.114' \n  },\n\n\n  Kai19930922**..\n\n  # macvlan\n \n docker network create -d macvlan --subnet=10.0.0.0/24 --gateway=10.0.0.10 -o parent=enp3s0 openwrt","tags":["docker"]},{"title":"openwrt 旁路由设置","url":"/2023/01/06/docker/docker openwrt配置/","content":"\n网上的教程太多，五花八门，修改的地方各不相同，有的根本就不能成功。我经过多次测试，并且本着最小程度修改系统的原则，终于解决了这个问题：\n1.LAN口取消桥接；\n2.防火墙添加\"iptables -t nat -I POSTROUTING -o eth0 -j MASQUERADE\"，重启防火墙，立马就能访问了。\n以上两项步骤缺一不可。\n\n\n\n\n\n置顶回复 来自 #garminc\n2022-8-27 06:42\n这个问题我记得已经有大神解释过了，假设你的ip是a，旁路由的ip是b，防火墙不加那一行的话，你通过旁路由发出的数据包源头都是a，主路由可以把外网对你的响应数据直接发给你。但是有些主路由会做校验，他发现实际上你的数据包是b发出来的，怀疑你被b劫持了，就会丢掉这个请求。此时防火墙只能加那一行，旁路由就是把你的数据包的源都改成b，主路由就没意见了，但是这样一来，你所有的数据都需要通过旁路由，没有不加那么快","tags":["docker"]},{"title":"hexo 常用命令","url":"/2023/01/06/hexo/hexo常用命令/","content":"# hexo 常用命令\n\n## 初始化博客\n``` shell\nhexo init blog\n```\n\n\n## 清理 public 目录\n\n``` shell\nhexo clean\n```\n\n## 生成博客的静态文件，通常输出到 public 目录。\n\n``` shell\nhexo generate\n```\n\n## 部署\n``` shell\nhexo deploy\n```\n\n## 启动本地服务器，通常在 http://localhost:4000 上访问。\n\n``` shell\nhexo server\n```","tags":["hexo"]},{"title":"MAC idea调整占用内存","url":"/2023/01/06/IDEA/MAC idea调整占用内存/","content":"# MAC idea调整占用内存\n\n###### 修改IntelliJ IDEA的内存配置\n\n> 找到IntelliJ IDEA在Mac上的内存配置文件，修改参数以后重启生效。\n> \n> ```\n> vi /Applications/IntelliJ\\ IDEA.app/Contents/bin/idea.vmoptions\n> ```\n> \n> \n> \n> \n 下面的是原始配置，自己视具体情况进行修改。\n> \n> ```vim\n>  -Xms128m\n> \n>  -Xmx750m\n> \n>  -XX:MaxPermSize=350m\n> \n>  -XX:ReservedCodeCacheSize=240m\n> \n>  -XX:+UseCompressedOops\n> ```\n> \n> \n\n> 在新版本的PhpStorm和IntelliJ IDEA，可在Help -> Edit Custom VM Options中设置JVM参数\n\n","tags":["linux"]}]